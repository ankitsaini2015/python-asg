"""
# Question 3
import numpy as np


class PolynomialSolver:

    # This function returns value of f(x) for an input

    def poly_func(self, deg, coeff_list, x):
        val_at_x = 0.0
        for n in range(0, deg + 1):
            val_at_x += (coeff_list[n] * (x ** n))
        return val_at_x

    # Main Function
    '''Input is - 1. Degree of polynomial
                  2. List of coefficients of polynomial
                  3. Method Name
    '''
    def solve(self, deg, coeff_list, method):

        if method is 'bisection':

            # Taking Input

            low = float(input("Enter lower bound of interval containing root\n"))
            up = float(input("Enter upper bound of interval containing root\n"))
            num_of_iter = int(input("Enter number of iterations\n"))
            tolerance = float(input("Enter tolerance limit\n"))
            interval_length = abs((low - up))

            # Loop terminates if interval is small or number of iterations exceeds limit

            while (num_of_iter > 0) and (interval_length > min(tolerance, 0.1)):
                mid = (low + up) / 2.0
                value_at_low = self.poly_func(deg, coeff_list, low) * self.poly_func(deg, coeff_list, mid)

                # Selecting correct interval

                if value_at_low < 0:
                    up = mid
                elif value_at_low > 0:
                    low = mid

                # If root is among interval end points, return the end points

                elif value_at_low == 0:
                    if self.poly_func(deg, coeff_list, low) == 0:
                        return [low - 0.0001, low + 0.0001]
                    else:
                        return [mid - 0.0001, mid + 0.0001]
                num_of_iter -= 1
            return [low, up]

        elif method is 'secant':

            # Taking Input

            low = float(input("Enter lower bound of interval\n"))
            up = float(input("Enter upper bound of interval\n"))
            num_of_iter = int(input("Enter number of iterations\n"))
            tolerance = float(input("Enter tolerance limit\n"))

            # Loop until value is close to zero or max number of iterations is reached

            while (num_of_iter > 0) and ((abs(self.poly_func(deg, coeff_list, low)) > min(tolerance, 0.1))):
                val_at_low = self.poly_func(deg, coeff_list, low)
                val_at_up = self.poly_func(deg, coeff_list, up)
                low, up = up, up - ((up - low) * val_at_up) / (val_at_up - val_at_low)
                num_of_iter -= 1
            return low

        elif method is 'secantrf':

            # Taking Input

            low = float(input("Enter lower bound of interval\n"))
            up = float(input("Enter upper bound of interval\n"))
            num_of_iter = int(input("Enter number of iterations\n"))
            tolerance = float(input("Enter tolerance limit\n"))
            pt = low

            # Loop until value is close to zero or max number of iterations is reached

            while (num_of_iter > 0) and (abs(self.poly_func(deg, coeff_list, low)) > min(tolerance, 0.1)):
                val_at_low = self.poly_func(deg, coeff_list, low)
                val_at_up = self.poly_func(deg, coeff_list, up)
                pt = up - ((up - low) * val_at_up) / (val_at_up - val_at_low)
                val_at_pt = self.poly_func(deg, coeff_list, pt)
                if val_at_low * val_at_pt < 0:
                    up = pt
                else:
                    low = pt
                num_of_iter -= 1
            return low

        elif method is 'newtonraphson':

            # Taking Input

            low = float(input("Enter the abscissa\n"))
            num_of_iter = int(input("Enter number of iterations\n"))
            tolerance = float(input("Enter tolerance limit\n"))

            # Loop until value is close to zero or max number of iterations is reached

            while (num_of_iter > 0) and (abs(self.poly_func(deg, coeff_list, low)) > min(tolerance, 0.1)):

                # Code to calculate the value of derivative of the polynomial at the point

                coeff_of_der = np.polyder(np.array(coeff_list[::-1]))[::-1]
                val_of_derivative = float(self.poly_func(deg - 1, coeff_of_der, low))

                low -= float(self.poly_func(deg, coeff_list, low) / val_of_derivative)
            return low

        # If method name does not match, return None
        else:
            return None
"""
'''
class PolynomialSolver:
	def F(self,n,L,val):
		k=0
		for i in range(n+1):
			k+=L[i]*(val**i)
		return k
	def fd(self,n,L,val):
		k=0
		for i in range(1,n+1):
			k+=i*L[i]*(val**(i-1))
		return k
	def solver(self,n,L,method):
		if(method=='bisection'):
			print("Enter lower bound of interval containing the root")
			l=int(input())
			print("Enter upper bound of interval containing the root")
			u=int(input())
			print("Enter maximum itertions")
			q=int(input())
			while(abs(self.F(n,L,l)-self.F(n,L,u))>0.00001 and q>0):
				m=(l+u)/2
				if(self.F(n,L,l)*self.F(n,L,m)<0):
					u=m
				else:
					l=m
				print (l,u,self.F(n,L,l),self.F(n,L,u))
				q-=1
			return([l,u])
		if(method=='secant'):
			print("Enter lower bound of interval containing the root")
			l=int(input())
			print("Enter upper bound of interval containing the root")
			u=int(input())
			print("Enter maximum itertions")
			q=int(input())
			while(abs(self.F(n,L,l))>0.00001 and q>0):
				f1=self.F(n,L,l)
				f2=self.F(n,L,u)
				l,u=u,u-(((u-l)*f2)/(f2-f1))
				print (l,u,f1,f2)
				q-=1
			return(l)
		if(method=='secantRF'):
			print("Enter lower bound of interval containing the root")
			l=int(input())
			print("Enter upper bound of interval containing the root")
			u=int(input())
			m=l
			print("Enter maximum itertions")
			q=int(input())
			while(abs(self.F(n,L,m))>0.00001 and q>0):
				f1=self.F(n,L,l)
				f2=self.F(n,L,u)
				m=u-(((u-l)*f2)/(f2-f1))
				rp=self.F(n,L,m)
				if(f1*rp<0):
					u=m
				else:
					l=m
				print (m)
				q-=1
			return(l)
		if(method=='newtonraphson'):
			print("Enter lower bound of interval containing the root")
			l=int(input())
			print("Enter maximum itertions")
			q=int(input())
			while(abs(self.F(n,L,l))>0.00001 and q>0):
				l=l-self.F(n,L,l)/self.fd(n,L,l)
			return(l)
		else:
			return NULL			
'''
import matplotlib.pyplot as plt
import numpy as np
class PolynomialSolver:
    epsilon, I1, I2, M, poly_coff, Interval = 0.0001, [], [], 0, [], [],
    def BisectionSearch(self, poly_coff, Interval):
        self.poly_coff = poly_coff
        self.Interval = Interval
        self.plot_the_curve()
        while (self.Interval[1]-self.Interval[0]) > self.epsilon:
            self.plot_Interval() 
            self.M = (self.Interval[1]+self.Interval[0])/2.0
            self.I1 = [self.Interval[0],self.M]
            self.I2 = [self.M,self.Interval[1]]
            if self.f(self.I1[0])*self.f(self.I1[1]) < 0:
                self.Interval = self.I1
            else:
                self.Interval = self.I2      
        plt.xlabel('x axis')
        plt.ylabel('y axis')
        plt.annotate('Approximate Root', xy = (self.Interval[0],5.0), xytext = (self.Interval[0],
        self.f(self.Interval[0])+20.0), arrowprops = dict(facecolor = 'black',shrink = 0.01))
        plt.show()
        return self.Interval            
    def f(self,x):
        sum = 0
        for i in range(len(self.poly_coff)):
            sum += self.poly_coff[i]*(x**i)
        return sum
    def plot_the_curve(self):
        x_cor = np.linspace(self.Interval[0], self.Interval[1], 100)
        plt.plot(x_cor,self.f(x_cor), color = '#123456', linewidth = 2.0)
    def plot_Interval(self):
        x_cor = np.array(self.Interval)
        plt.plot(x_cor,self.f(x_cor), 'o')
